import { NextRequest, NextResponse } from 'next/server'; import { getClient } from '@/lib/db'; import { withinRadius } from '@/lib/geo'; export async function GET(req:NextRequest){ const prisma=await getClient(); const lat=Number(req.nextUrl.searchParams.get('lat')); const lng=Number(req.nextUrl.searchParams.get('lng')); const radius=Math.max(1,Math.min(50,Number(req.nextUrl.searchParams.get('radius')||10))); if(!Number.isFinite(lat)||!Number.isFinite(lng)) return NextResponse.json({error:'invalid_coords'},{status:400}); const rows=await (prisma as any).helperPresence.findMany({ where:{ status:{ in:['ONLINE','BUSY'] } }, select:{ helperId:true, lat:true, lng:true, status:true, capacity:true, updatedAt:true } }); const now=Date.now(); const fresh=rows.filter((r:any)=> r.lat!=null && r.lng!=null && (now-new Date(r.updatedAt).getTime())<5*60*1000); const filtered=fresh.filter((r:any)=> withinRadius(lat,lng,r.lat!,r.lng!,radius)); const available=filtered.filter((r:any)=> r.status==='ONLINE').length; const busy=filtered.filter((r:any)=> r.status==='BUSY').length; return NextResponse.json({ok:true,available,busy,radiusKm:radius,sample:filtered.slice(0,10).map((r:any)=>({helperId:r.helperId,status:r.status,capacity:r.capacity}))}); }
