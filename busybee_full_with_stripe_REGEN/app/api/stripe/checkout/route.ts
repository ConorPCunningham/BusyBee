import { NextRequest, NextResponse } from 'next/server'; import { getClient } from '@/lib/db'; import { getStripe, PLATFORM_FEE_BPS } from '@/lib/stripe'; import { requireUser } from '@/lib/auth.signed'; export async function POST(req:NextRequest){ let userId:string; try{ const u=await requireUser(); userId=u.id; }catch{ return NextResponse.json({error:'unauthorized'},{status:401}); } const prisma=await getClient(); const stripe=getStripe(); const { jobId }=await req.json().catch(()=>({} as any)); if(!jobId) return NextResponse.json({error:'missing_jobId'},{status:400}); const job=await (prisma as any).job.findUnique({ where:{ id: jobId } }); if(!job||!job.helperId||!job.priceCents||!job.currency) return NextResponse.json({error:'job_incomplete'},{status:400}); const helper=await (prisma as any).user.findUnique({ where:{ id: job.helperId } }); if(!helper?.stripeAccountId) return NextResponse.json({error:'helper_not_connected'},{status:400}); const amount=job.priceCents; const fee=Math.floor(amount*PLATFORM_FEE_BPS/10000); const origin=req.headers.get('origin')||process.env.NEXT_PUBLIC_SITE_URL||'http://localhost:3000'; const session=await stripe.checkout.sessions.create({ mode:'payment', currency: job.currency.toLowerCase(), payment_method_types:['card'], line_items:[{ quantity:1, price_data:{ currency: job.currency.toLowerCase(), unit_amount: amount, product_data:{ name:`BusyBee job â€¢ ${job.title}` } } }], success_url:`${origin}/jobs/${job.id}/pay/success?session_id={CHECKOUT_SESSION_ID}`, cancel_url:`${origin}/jobs/${job.id}/pay/cancel`, payment_intent_data:{ application_fee_amount: fee, transfer_data:{ destination: helper.stripeAccountId } }, metadata:{ jobId: job.id, helperId: job.helperId } }); await (prisma as any).escrow.upsert({ where:{ jobId: job.id }, update:{ stripeCheckoutSessionId: session.id, amountCents: amount, currency: job.currency, applicationFeeCents: fee, status:'HELD' }, create:{ jobId: job.id, stripeCheckoutSessionId: session.id, amountCents: amount, currency: job.currency, applicationFeeCents: fee, status:'HELD' } }); return NextResponse.json({ id: session.id, url: session.url }); }
