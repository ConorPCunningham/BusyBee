import { NextRequest, NextResponse } from 'next/server'; import { getClient } from '@/lib/db'; import { requireUser } from '@/lib/auth.signed'; export async function GET(){ let userId:string; try{ const u=await requireUser(); userId=u.id; }catch{ return NextResponse.json({error:'unauthorized'},{status:401}); } const prisma=await getClient(); const row=await (prisma as any).helperPresence.findUnique({ where:{ helperId:userId } }); return NextResponse.json({ok:true,presence:row||null}); } export async function POST(req:NextRequest){ let userId:string; try{ const u=await requireUser(); userId=u.id; }catch{ return NextResponse.json({error:'unauthorized'},{status:401}); } const prisma=await getClient(); const body=await req.json().catch(()=>null); if(!body) return NextResponse.json({error:'invalid'},{status:400}); let { status, capacity } = body as any; if(typeof status!=='string'||!['ONLINE','OFFLINE','BUSY'].includes(status)) status='ONLINE'; if(typeof capacity!=='number'||capacity<1||capacity>5) capacity=1; const row=await (prisma as any).helperPresence.upsert({ where:{ helperId:userId }, update:{ status, capacity }, create:{ helperId:userId, status, capacity } }); return NextResponse.json({ok:true,presence:row}); }
