import { NextRequest, NextResponse } from 'next/server'; import { getStripe } from '@/lib/stripe'; import { getClient } from '@/lib/db'; import { requireUser } from '@/lib/auth.signed'; export async function POST(req:NextRequest){ let userId:string; try{ const u=await requireUser(); userId=u.id; }catch{ return NextResponse.json({error:'unauthorized'},{status:401}); } const prisma=await getClient(); const stripe=getStripe(); let user=await (prisma as any).user.findUnique({ where:{ id:userId } }); if(!user) return NextResponse.json({error:'no_user'},{status:404}); if(!user.stripeAccountId){ const account=await stripe.accounts.create({ type:'express', capabilities:{ transfers:{ requested:true }, card_payments:{ requested:true } } }); user=await (prisma as any).user.update({ where:{ id:userId }, data:{ stripeAccountId: account.id } }); } const origin=req.headers.get('origin')||process.env.NEXT_PUBLIC_SITE_URL||'http://localhost:3000'; const link=await stripe.accountLinks.create({ account:user.stripeAccountId, refresh_url:`${origin}/helper/dashboard?onboard=refresh`, return_url:`${origin}/helper/dashboard?onboard=return`, type:'account_onboarding' }); return NextResponse.json({ url: link.url }); }
